{"title":"Image Labeling","description":"An easy-to-use image labeler, where you can select and crop different areas of an image and add labels to them.","instructions":"Your mission today is to use investigate the image and use the crop tool in order to identify the elements in the image provided.\n\nPlease read the instruction carefully and select as many obvious elements as possible and give them a name. \n\n","template":"  <div id=\"app\" style=\"text-align: center;\">\n    {{ message }}\n    <h1 class=\"title\">{{title}}</h1>\n\n    <hr>\n\n    <!-- Wrap the image or canvas element with a block element (container) -->\n    <div class=\"mx-auto\" style=\"max-width: 80%\">\n      <img id=\"image\" ref=\"image\" :src=\"imageSource\" style=\"display: block; max-width: 100%;\">\n    </div>\n\n    <hr>\n\n    <div>\n      <input v-model=\"tmpLabel\" type=\"text\" name=\"label\" id=\"idx\" placeholder=\"Add label\" style=\"max-width: 400px;\">\n      <button class=\"button is-primary\" @click.prevent=\"addCrop\">Add Label</button>\n    </div>\n\n    <br>\n\n    <div class=\"labels mx-6 mx-auto\">\n      <ul>\n        <li v-for=\"(label, idx) in labels\">\n\n          <div class=\"mx-auto\" style=\"max-width: 600px;\">\n            <div class=\"media mx-auto mx-6 is-centered\">\n\n              <div class=\"media-left\">\n                <figure class=\"image is-64x64\">\n                  <img class=\"\" :src=\"label.croppedCanvas\">\n                </figure>\n              </div>\n              \n              <div class=\"media-content\">\n                {{ label.label }}\n              </div>\n\n              <div class=\"media-right\">\n                <button class=\"delete is-medium\" @click.prevent=\"labels.splice(idx, 1)\"></button>\n              </div>\n\n            </div>\n          </div>\n        </li>\n      </ul>\n    </div>\n\n    <hr>\n    <button \n      @click.prevent=\"uploadAndSubmit\" \n      class=\"button is-primary is-large\"\n      :class=\"{'is-loading': btnLoading}\"\n      :disabled=\"labels.length < 1\"\n    >\n      Submit\n    </button>\n  </div>\n\n<!-- 📚 Load in resources: [Bulma, Effect Network Styling]  -->\n<link rel=\"stylesheet\" href=\"https://unpkg.com/bulma@0.9.4/css/bulma.min.css\">\n<link rel=\"stylesheet\" href=\"https://unpkg.com/cropperjs@1.5.12/dist/cropper.min.css\">\n<link href=\"https://app.effect.network/force-defaults.css\" rel=\"stylesheet\" />\n\n<script src=\"https://cdn.jsdelivr.net/npm/ipfs-http-client/dist/index.min.js\"></script>\n<script type=\"module\">\n  import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'\n  import Cropper from 'https://unpkg.com/cropperjs@1.5.12/dist/cropper.esm.js'\n\n  createApp({\n    data () {\n      return {\n        title: \"Effect Network Image Labeler 🧐\",\n        imageSource: \"${image_url}\",\n        cropper: null,\n        tmpLabel: '',\n        labels: [],\n        btnLoading: false,\n        ipfsClient: null\n      }\n    },\n    computed: {},\n    created () {\n      setInterval(() => window.forceResize(), 500)\n    },\n    mounted () {\n      const imgElement = this.$refs.image\n      this.cropper = new Cropper(imgElement, {\n        crop(event) { \n          // console.log({...event.detail}) \n        }\n      })\n      console.log(this.cropper)\n    },\n    methods: {\n      addCrop () {\n        if (this.tmpLabel.length == 0) {\n          alert(\"Please fill in a label.\")\n        } else {            \n          this.labels.push({\n            label: this.tmpLabel, \n            croppedCanvas: this.cropper.getCroppedCanvas({\n              width: 160,\n              height: 160\n            }).toDataURL('image/jpeg')\n          })\n          this.tmpLabel = ''\n          console.log(this.labels)\n        }\n      },\n      async uploadAndSubmit () {\n        this.btnLoading = true\n        try {\n          // console.log(IpfsApi)\n          const ipfs = window.IpfsHttpClient.create({ host: 'ipfs.effect.ai', port: 443, protocol: 'https' })\n          const hash = await ipfs.add(JSON.stringify(\n              { \"data\": this.labels, \"image_url\": `${image_url}` }\n          ))\n\n          console.log(hash)\n\n          parent.postMessage({'task': 'submit', 'values': {\n          \"hash\": hash.path\n          }}, '*')\n        } catch (error) {\n          console.error('Failed to upload to IPFS', error)\n        }\n        this.btnLoading = false\n      }\n    },\n  })\n  .mount(\"#app\");\n</script>\n","image":"","category":"annotations","example_task":{"image_url":"https://effect.network/img/logo/logo_icon.png"},"version":1.1,"webhook":null,"reward":"20","estimated_time":"120"}